// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hdoacommandcenter/hdoacommandcenter/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b8f89032272f80f, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b8f89032272f80f, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetCommerceRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetCommerceRequest) Reset()         { *m = QueryGetCommerceRequest{} }
func (m *QueryGetCommerceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCommerceRequest) ProtoMessage()    {}
func (*QueryGetCommerceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b8f89032272f80f, []int{2}
}
func (m *QueryGetCommerceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCommerceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCommerceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCommerceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCommerceRequest.Merge(m, src)
}
func (m *QueryGetCommerceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCommerceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCommerceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCommerceRequest proto.InternalMessageInfo

func (m *QueryGetCommerceRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetCommerceResponse struct {
	Commerce Commerce `protobuf:"bytes,1,opt,name=Commerce,proto3" json:"Commerce"`
}

func (m *QueryGetCommerceResponse) Reset()         { *m = QueryGetCommerceResponse{} }
func (m *QueryGetCommerceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCommerceResponse) ProtoMessage()    {}
func (*QueryGetCommerceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b8f89032272f80f, []int{3}
}
func (m *QueryGetCommerceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCommerceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCommerceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCommerceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCommerceResponse.Merge(m, src)
}
func (m *QueryGetCommerceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCommerceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCommerceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCommerceResponse proto.InternalMessageInfo

func (m *QueryGetCommerceResponse) GetCommerce() Commerce {
	if m != nil {
		return m.Commerce
	}
	return Commerce{}
}

type QueryAllCommerceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCommerceRequest) Reset()         { *m = QueryAllCommerceRequest{} }
func (m *QueryAllCommerceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCommerceRequest) ProtoMessage()    {}
func (*QueryAllCommerceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b8f89032272f80f, []int{4}
}
func (m *QueryAllCommerceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCommerceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCommerceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCommerceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCommerceRequest.Merge(m, src)
}
func (m *QueryAllCommerceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCommerceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCommerceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCommerceRequest proto.InternalMessageInfo

func (m *QueryAllCommerceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCommerceResponse struct {
	Commerce   []Commerce          `protobuf:"bytes,1,rep,name=Commerce,proto3" json:"Commerce"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCommerceResponse) Reset()         { *m = QueryAllCommerceResponse{} }
func (m *QueryAllCommerceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCommerceResponse) ProtoMessage()    {}
func (*QueryAllCommerceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b8f89032272f80f, []int{5}
}
func (m *QueryAllCommerceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCommerceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCommerceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCommerceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCommerceResponse.Merge(m, src)
}
func (m *QueryAllCommerceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCommerceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCommerceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCommerceResponse proto.InternalMessageInfo

func (m *QueryAllCommerceResponse) GetCommerce() []Commerce {
	if m != nil {
		return m.Commerce
	}
	return nil
}

func (m *QueryAllCommerceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetGovernanceRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetGovernanceRequest) Reset()         { *m = QueryGetGovernanceRequest{} }
func (m *QueryGetGovernanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGovernanceRequest) ProtoMessage()    {}
func (*QueryGetGovernanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b8f89032272f80f, []int{6}
}
func (m *QueryGetGovernanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGovernanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGovernanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGovernanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGovernanceRequest.Merge(m, src)
}
func (m *QueryGetGovernanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGovernanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGovernanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGovernanceRequest proto.InternalMessageInfo

func (m *QueryGetGovernanceRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetGovernanceResponse struct {
	Governance Governance `protobuf:"bytes,1,opt,name=Governance,proto3" json:"Governance"`
}

func (m *QueryGetGovernanceResponse) Reset()         { *m = QueryGetGovernanceResponse{} }
func (m *QueryGetGovernanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGovernanceResponse) ProtoMessage()    {}
func (*QueryGetGovernanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b8f89032272f80f, []int{7}
}
func (m *QueryGetGovernanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGovernanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGovernanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGovernanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGovernanceResponse.Merge(m, src)
}
func (m *QueryGetGovernanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGovernanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGovernanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGovernanceResponse proto.InternalMessageInfo

func (m *QueryGetGovernanceResponse) GetGovernance() Governance {
	if m != nil {
		return m.Governance
	}
	return Governance{}
}

type QueryAllGovernanceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGovernanceRequest) Reset()         { *m = QueryAllGovernanceRequest{} }
func (m *QueryAllGovernanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllGovernanceRequest) ProtoMessage()    {}
func (*QueryAllGovernanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b8f89032272f80f, []int{8}
}
func (m *QueryAllGovernanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGovernanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGovernanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGovernanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGovernanceRequest.Merge(m, src)
}
func (m *QueryAllGovernanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGovernanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGovernanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGovernanceRequest proto.InternalMessageInfo

func (m *QueryAllGovernanceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllGovernanceResponse struct {
	Governance []Governance        `protobuf:"bytes,1,rep,name=Governance,proto3" json:"Governance"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGovernanceResponse) Reset()         { *m = QueryAllGovernanceResponse{} }
func (m *QueryAllGovernanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllGovernanceResponse) ProtoMessage()    {}
func (*QueryAllGovernanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b8f89032272f80f, []int{9}
}
func (m *QueryAllGovernanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGovernanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGovernanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGovernanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGovernanceResponse.Merge(m, src)
}
func (m *QueryAllGovernanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGovernanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGovernanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGovernanceResponse proto.InternalMessageInfo

func (m *QueryAllGovernanceResponse) GetGovernance() []Governance {
	if m != nil {
		return m.Governance
	}
	return nil
}

func (m *QueryAllGovernanceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetDomainRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetDomainRequest) Reset()         { *m = QueryGetDomainRequest{} }
func (m *QueryGetDomainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDomainRequest) ProtoMessage()    {}
func (*QueryGetDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b8f89032272f80f, []int{10}
}
func (m *QueryGetDomainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDomainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDomainRequest.Merge(m, src)
}
func (m *QueryGetDomainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDomainRequest proto.InternalMessageInfo

func (m *QueryGetDomainRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetDomainResponse struct {
	Domain Domain `protobuf:"bytes,1,opt,name=Domain,proto3" json:"Domain"`
}

func (m *QueryGetDomainResponse) Reset()         { *m = QueryGetDomainResponse{} }
func (m *QueryGetDomainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDomainResponse) ProtoMessage()    {}
func (*QueryGetDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b8f89032272f80f, []int{11}
}
func (m *QueryGetDomainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDomainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDomainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDomainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDomainResponse.Merge(m, src)
}
func (m *QueryGetDomainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDomainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDomainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDomainResponse proto.InternalMessageInfo

func (m *QueryGetDomainResponse) GetDomain() Domain {
	if m != nil {
		return m.Domain
	}
	return Domain{}
}

type QueryAllDomainRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDomainRequest) Reset()         { *m = QueryAllDomainRequest{} }
func (m *QueryAllDomainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDomainRequest) ProtoMessage()    {}
func (*QueryAllDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b8f89032272f80f, []int{12}
}
func (m *QueryAllDomainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDomainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDomainRequest.Merge(m, src)
}
func (m *QueryAllDomainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDomainRequest proto.InternalMessageInfo

func (m *QueryAllDomainRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllDomainResponse struct {
	Domain     []Domain            `protobuf:"bytes,1,rep,name=Domain,proto3" json:"Domain"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDomainResponse) Reset()         { *m = QueryAllDomainResponse{} }
func (m *QueryAllDomainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDomainResponse) ProtoMessage()    {}
func (*QueryAllDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b8f89032272f80f, []int{13}
}
func (m *QueryAllDomainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDomainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDomainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDomainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDomainResponse.Merge(m, src)
}
func (m *QueryAllDomainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDomainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDomainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDomainResponse proto.InternalMessageInfo

func (m *QueryAllDomainResponse) GetDomain() []Domain {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *QueryAllDomainResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetComplianceRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetComplianceRequest) Reset()         { *m = QueryGetComplianceRequest{} }
func (m *QueryGetComplianceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetComplianceRequest) ProtoMessage()    {}
func (*QueryGetComplianceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b8f89032272f80f, []int{14}
}
func (m *QueryGetComplianceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetComplianceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetComplianceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetComplianceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetComplianceRequest.Merge(m, src)
}
func (m *QueryGetComplianceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetComplianceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetComplianceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetComplianceRequest proto.InternalMessageInfo

func (m *QueryGetComplianceRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetComplianceResponse struct {
	Compliance Compliance `protobuf:"bytes,1,opt,name=Compliance,proto3" json:"Compliance"`
}

func (m *QueryGetComplianceResponse) Reset()         { *m = QueryGetComplianceResponse{} }
func (m *QueryGetComplianceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetComplianceResponse) ProtoMessage()    {}
func (*QueryGetComplianceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b8f89032272f80f, []int{15}
}
func (m *QueryGetComplianceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetComplianceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetComplianceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetComplianceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetComplianceResponse.Merge(m, src)
}
func (m *QueryGetComplianceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetComplianceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetComplianceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetComplianceResponse proto.InternalMessageInfo

func (m *QueryGetComplianceResponse) GetCompliance() Compliance {
	if m != nil {
		return m.Compliance
	}
	return Compliance{}
}

type QueryAllComplianceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllComplianceRequest) Reset()         { *m = QueryAllComplianceRequest{} }
func (m *QueryAllComplianceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllComplianceRequest) ProtoMessage()    {}
func (*QueryAllComplianceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b8f89032272f80f, []int{16}
}
func (m *QueryAllComplianceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllComplianceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllComplianceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllComplianceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllComplianceRequest.Merge(m, src)
}
func (m *QueryAllComplianceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllComplianceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllComplianceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllComplianceRequest proto.InternalMessageInfo

func (m *QueryAllComplianceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllComplianceResponse struct {
	Compliance []Compliance        `protobuf:"bytes,1,rep,name=Compliance,proto3" json:"Compliance"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllComplianceResponse) Reset()         { *m = QueryAllComplianceResponse{} }
func (m *QueryAllComplianceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllComplianceResponse) ProtoMessage()    {}
func (*QueryAllComplianceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b8f89032272f80f, []int{17}
}
func (m *QueryAllComplianceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllComplianceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllComplianceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllComplianceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllComplianceResponse.Merge(m, src)
}
func (m *QueryAllComplianceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllComplianceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllComplianceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllComplianceResponse proto.InternalMessageInfo

func (m *QueryAllComplianceResponse) GetCompliance() []Compliance {
	if m != nil {
		return m.Compliance
	}
	return nil
}

func (m *QueryAllComplianceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetFactoryRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetFactoryRequest) Reset()         { *m = QueryGetFactoryRequest{} }
func (m *QueryGetFactoryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetFactoryRequest) ProtoMessage()    {}
func (*QueryGetFactoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b8f89032272f80f, []int{18}
}
func (m *QueryGetFactoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFactoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFactoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFactoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFactoryRequest.Merge(m, src)
}
func (m *QueryGetFactoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFactoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFactoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFactoryRequest proto.InternalMessageInfo

func (m *QueryGetFactoryRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetFactoryResponse struct {
	Factory Factory `protobuf:"bytes,1,opt,name=Factory,proto3" json:"Factory"`
}

func (m *QueryGetFactoryResponse) Reset()         { *m = QueryGetFactoryResponse{} }
func (m *QueryGetFactoryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetFactoryResponse) ProtoMessage()    {}
func (*QueryGetFactoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b8f89032272f80f, []int{19}
}
func (m *QueryGetFactoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFactoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFactoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFactoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFactoryResponse.Merge(m, src)
}
func (m *QueryGetFactoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFactoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFactoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFactoryResponse proto.InternalMessageInfo

func (m *QueryGetFactoryResponse) GetFactory() Factory {
	if m != nil {
		return m.Factory
	}
	return Factory{}
}

type QueryAllFactoryRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFactoryRequest) Reset()         { *m = QueryAllFactoryRequest{} }
func (m *QueryAllFactoryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllFactoryRequest) ProtoMessage()    {}
func (*QueryAllFactoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b8f89032272f80f, []int{20}
}
func (m *QueryAllFactoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFactoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFactoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFactoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFactoryRequest.Merge(m, src)
}
func (m *QueryAllFactoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFactoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFactoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFactoryRequest proto.InternalMessageInfo

func (m *QueryAllFactoryRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllFactoryResponse struct {
	Factory    []Factory           `protobuf:"bytes,1,rep,name=Factory,proto3" json:"Factory"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFactoryResponse) Reset()         { *m = QueryAllFactoryResponse{} }
func (m *QueryAllFactoryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFactoryResponse) ProtoMessage()    {}
func (*QueryAllFactoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b8f89032272f80f, []int{21}
}
func (m *QueryAllFactoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFactoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFactoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFactoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFactoryResponse.Merge(m, src)
}
func (m *QueryAllFactoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFactoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFactoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFactoryResponse proto.InternalMessageInfo

func (m *QueryAllFactoryResponse) GetFactory() []Factory {
	if m != nil {
		return m.Factory
	}
	return nil
}

func (m *QueryAllFactoryResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "hdoacommandcenter.hdoacommandcenter.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "hdoacommandcenter.hdoacommandcenter.QueryParamsResponse")
	proto.RegisterType((*QueryGetCommerceRequest)(nil), "hdoacommandcenter.hdoacommandcenter.QueryGetCommerceRequest")
	proto.RegisterType((*QueryGetCommerceResponse)(nil), "hdoacommandcenter.hdoacommandcenter.QueryGetCommerceResponse")
	proto.RegisterType((*QueryAllCommerceRequest)(nil), "hdoacommandcenter.hdoacommandcenter.QueryAllCommerceRequest")
	proto.RegisterType((*QueryAllCommerceResponse)(nil), "hdoacommandcenter.hdoacommandcenter.QueryAllCommerceResponse")
	proto.RegisterType((*QueryGetGovernanceRequest)(nil), "hdoacommandcenter.hdoacommandcenter.QueryGetGovernanceRequest")
	proto.RegisterType((*QueryGetGovernanceResponse)(nil), "hdoacommandcenter.hdoacommandcenter.QueryGetGovernanceResponse")
	proto.RegisterType((*QueryAllGovernanceRequest)(nil), "hdoacommandcenter.hdoacommandcenter.QueryAllGovernanceRequest")
	proto.RegisterType((*QueryAllGovernanceResponse)(nil), "hdoacommandcenter.hdoacommandcenter.QueryAllGovernanceResponse")
	proto.RegisterType((*QueryGetDomainRequest)(nil), "hdoacommandcenter.hdoacommandcenter.QueryGetDomainRequest")
	proto.RegisterType((*QueryGetDomainResponse)(nil), "hdoacommandcenter.hdoacommandcenter.QueryGetDomainResponse")
	proto.RegisterType((*QueryAllDomainRequest)(nil), "hdoacommandcenter.hdoacommandcenter.QueryAllDomainRequest")
	proto.RegisterType((*QueryAllDomainResponse)(nil), "hdoacommandcenter.hdoacommandcenter.QueryAllDomainResponse")
	proto.RegisterType((*QueryGetComplianceRequest)(nil), "hdoacommandcenter.hdoacommandcenter.QueryGetComplianceRequest")
	proto.RegisterType((*QueryGetComplianceResponse)(nil), "hdoacommandcenter.hdoacommandcenter.QueryGetComplianceResponse")
	proto.RegisterType((*QueryAllComplianceRequest)(nil), "hdoacommandcenter.hdoacommandcenter.QueryAllComplianceRequest")
	proto.RegisterType((*QueryAllComplianceResponse)(nil), "hdoacommandcenter.hdoacommandcenter.QueryAllComplianceResponse")
	proto.RegisterType((*QueryGetFactoryRequest)(nil), "hdoacommandcenter.hdoacommandcenter.QueryGetFactoryRequest")
	proto.RegisterType((*QueryGetFactoryResponse)(nil), "hdoacommandcenter.hdoacommandcenter.QueryGetFactoryResponse")
	proto.RegisterType((*QueryAllFactoryRequest)(nil), "hdoacommandcenter.hdoacommandcenter.QueryAllFactoryRequest")
	proto.RegisterType((*QueryAllFactoryResponse)(nil), "hdoacommandcenter.hdoacommandcenter.QueryAllFactoryResponse")
}

func init() {
	proto.RegisterFile("hdoacommandcenter/hdoacommandcenter/query.proto", fileDescriptor_9b8f89032272f80f)
}

var fileDescriptor_9b8f89032272f80f = []byte{
	// 945 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x98, 0xdf, 0x6b, 0x2b, 0x45,
	0x14, 0xc7, 0x33, 0x49, 0xad, 0x3a, 0x45, 0xc1, 0xb1, 0x6a, 0x5d, 0x24, 0xca, 0x0a, 0xb6, 0x5a,
	0xb3, 0xdb, 0xa4, 0x3f, 0x6d, 0x6b, 0x24, 0xad, 0x34, 0x08, 0x82, 0x35, 0xe0, 0x8b, 0x2f, 0x76,
	0xbb, 0x59, 0xd7, 0xc5, 0xcd, 0x4e, 0x9a, 0xdd, 0x16, 0x8b, 0xf8, 0xe2, 0xa3, 0x4f, 0x82, 0xff,
	0x86, 0x0f, 0x22, 0xbe, 0xa9, 0x88, 0x88, 0x50, 0x10, 0xa1, 0xe0, 0x8b, 0x4f, 0x22, 0xed, 0xfd,
	0x43, 0x2e, 0x99, 0x39, 0x9b, 0xd9, 0xcd, 0x6e, 0x6e, 0x67, 0x92, 0xed, 0x5b, 0x3b, 0x99, 0x73,
	0xce, 0xf7, 0x73, 0xce, 0x9c, 0x99, 0x93, 0x60, 0xf3, 0xb3, 0x2e, 0xb5, 0x6c, 0xda, 0xeb, 0x59,
	0x41, 0xd7, 0x76, 0x82, 0xc8, 0x19, 0xe4, 0xac, 0x9c, 0x9d, 0x3b, 0x83, 0x4b, 0xa3, 0x3f, 0xa0,
	0x11, 0x25, 0xaf, 0x66, 0x3e, 0x36, 0x32, 0x2b, 0xda, 0xa2, 0x4b, 0x5d, 0xca, 0xf6, 0x9b, 0xc3,
	0xbf, 0xb8, 0xa9, 0xf6, 0x92, 0x4b, 0xa9, 0xeb, 0x3b, 0xa6, 0xd5, 0xf7, 0x4c, 0x2b, 0x08, 0x68,
	0x64, 0x45, 0x1e, 0x0d, 0x42, 0xf8, 0xf4, 0x0d, 0x9b, 0x86, 0x3d, 0x1a, 0x9a, 0xa7, 0x56, 0xe8,
	0xf0, 0x88, 0xe6, 0x45, 0xfd, 0xd4, 0x89, 0xac, 0xba, 0xd9, 0xb7, 0x5c, 0x2f, 0x60, 0x9b, 0x61,
	0xef, 0x9a, 0x8c, 0xea, 0xbe, 0x35, 0xb0, 0x7a, 0xb1, 0xf7, 0x86, 0x8c, 0xc5, 0xf0, 0x3f, 0x67,
	0x60, 0x3b, 0x60, 0xb3, 0x21, 0x63, 0xe3, 0xd2, 0x0b, 0x67, 0x10, 0x58, 0xc1, 0xc8, 0x4a, 0x4a,
	0x5b, 0x97, 0xf6, 0x2c, 0x2f, 0x50, 0x89, 0x63, 0xd3, 0x5e, 0xdf, 0xf7, 0x12, 0x71, 0xea, 0x32,
	0x56, 0x9f, 0x5a, 0x76, 0x44, 0xe3, 0xda, 0xe9, 0x8b, 0x98, 0x7c, 0x38, 0x4c, 0xec, 0x31, 0xcb,
	0x4c, 0xc7, 0x39, 0x3b, 0x77, 0xc2, 0x48, 0x3f, 0xc1, 0xcf, 0xa6, 0x56, 0xc3, 0x3e, 0x0d, 0x42,
	0x87, 0xbc, 0x87, 0xe7, 0x79, 0x06, 0x97, 0xd0, 0x2b, 0x68, 0x65, 0xa1, 0xb1, 0x6a, 0x48, 0x54,
	0xde, 0xe0, 0x4e, 0x0e, 0xe6, 0xae, 0xfe, 0x7b, 0xb9, 0xd4, 0x01, 0x07, 0xfa, 0xeb, 0xf8, 0x05,
	0x16, 0xa1, 0xed, 0x44, 0x87, 0x90, 0x62, 0x08, 0x4e, 0x9e, 0xc6, 0x65, 0xaf, 0xcb, 0x22, 0xcc,
	0x75, 0xca, 0x5e, 0x57, 0xff, 0x1c, 0x2f, 0x65, 0xb7, 0x82, 0xa2, 0x0f, 0xf0, 0x13, 0xf1, 0x1a,
	0x68, 0xaa, 0x49, 0x69, 0x8a, 0x8d, 0x40, 0xd5, 0xc8, 0x89, 0x6e, 0x81, 0xae, 0x96, 0xef, 0x8f,
	0xeb, 0x3a, 0xc2, 0x58, 0x9c, 0x3a, 0x88, 0xf6, 0x9a, 0xc1, 0x8f, 0xa8, 0x31, 0x3c, 0xa2, 0x06,
	0x6f, 0x0a, 0x38, 0xa2, 0xc6, 0xb1, 0xe5, 0xc6, 0xb6, 0x9d, 0x84, 0xa5, 0xfe, 0x13, 0x02, 0xa0,
	0x54, 0x8c, 0x5c, 0xa0, 0xca, 0xcc, 0x40, 0xa4, 0x9d, 0x52, 0x5d, 0x66, 0xaa, 0x97, 0xef, 0x54,
	0xcd, 0xd5, 0xa4, 0x64, 0xaf, 0xe2, 0x17, 0xe3, 0x32, 0xb4, 0x47, 0x07, 0x7c, 0x52, 0xcd, 0x42,
	0xac, 0xe5, 0x6d, 0x06, 0xc8, 0x8f, 0x30, 0x16, 0xab, 0x90, 0x49, 0x53, 0x0a, 0x53, 0x98, 0x01,
	0x68, 0xc2, 0x91, 0x6e, 0x83, 0xc2, 0x96, 0xef, 0x67, 0x15, 0x16, 0x55, 0xbd, 0x5f, 0x10, 0xa0,
	0x8d, 0x45, 0x99, 0x80, 0x56, 0x29, 0x04, 0xad, 0xb8, 0x2a, 0x2e, 0xe3, 0xe7, 0xe2, 0xc2, 0xbc,
	0xcb, 0x2e, 0x9c, 0x49, 0x15, 0xb4, 0xf1, 0xf3, 0xe3, 0x1b, 0xc5, 0x2d, 0xc0, 0x57, 0x94, 0x6e,
	0x01, 0x6e, 0x12, 0xdf, 0x02, 0xfc, 0x3f, 0xfd, 0x13, 0x50, 0xd3, 0xf2, 0xfd, 0xb4, 0x9a, 0xa2,
	0xaa, 0xf5, 0x3d, 0x02, 0x8c, 0x44, 0x84, 0x1c, 0x8c, 0xca, 0x4c, 0x18, 0xf7, 0xd2, 0x63, 0x87,
	0xa3, 0xcb, 0x5d, 0xa2, 0xc7, 0x92, 0x9b, 0xc5, 0x41, 0x14, 0xab, 0x4a, 0x3d, 0x26, 0xcc, 0xe2,
	0x83, 0x28, 0x56, 0x92, 0x3d, 0x96, 0x55, 0x78, 0x1f, 0x3d, 0x26, 0x81, 0x56, 0x29, 0x04, 0xad,
	0xb8, 0x2a, 0xae, 0x88, 0xd6, 0x39, 0xe2, 0x8f, 0xed, 0xa4, 0x12, 0xba, 0xe2, 0x15, 0x1c, 0xed,
	0x04, 0xc8, 0xf7, 0xf1, 0xe3, 0xb0, 0x04, 0x89, 0x7c, 0x53, 0x8a, 0x10, 0x6c, 0x00, 0x2f, 0x76,
	0xa1, 0x9f, 0x88, 0x36, 0x18, 0x93, 0x54, 0x54, 0xcd, 0x7e, 0x40, 0xe2, 0xe5, 0x7c, 0x24, 0x4b,
	0x65, 0x46, 0x96, 0xc2, 0xea, 0xd4, 0xf8, 0xe6, 0x19, 0xfc, 0x18, 0x93, 0x4c, 0x7e, 0x44, 0x78,
	0x9e, 0x8f, 0x29, 0x64, 0x5b, 0x4a, 0x5a, 0x76, 0x66, 0xd2, 0x76, 0xd4, 0x0d, 0xb9, 0x26, 0x7d,
	0xf3, 0xeb, 0x7f, 0x1e, 0x7c, 0x57, 0x36, 0x49, 0x8d, 0x4d, 0x6b, 0x35, 0x30, 0xa8, 0xdd, 0x31,
	0xc5, 0x92, 0x3f, 0x91, 0x98, 0x15, 0xc8, 0xbe, 0x7c, 0xf4, 0xec, 0xc8, 0xa5, 0xbd, 0x3d, 0xa5,
	0x35, 0x00, 0xec, 0x33, 0x80, 0x2d, 0xb2, 0x21, 0x09, 0x10, 0x0f, 0xd5, 0xe6, 0x97, 0x5e, 0xf7,
	0x2b, 0xf2, 0x07, 0xc2, 0x0b, 0xb1, 0xcb, 0x96, 0xef, 0xab, 0xa0, 0x64, 0xa7, 0x34, 0x15, 0x94,
	0x9c, 0xf9, 0x4b, 0xdf, 0x66, 0x28, 0x75, 0x62, 0x2a, 0xa2, 0x90, 0xbf, 0x51, 0xf2, 0xe5, 0x27,
	0x4d, 0xa5, 0x8c, 0x66, 0xc6, 0x15, 0xed, 0x9d, 0xa9, 0xed, 0x01, 0xa4, 0xc9, 0x40, 0x76, 0xc8,
	0x96, 0x24, 0x88, 0xf8, 0xd2, 0xc2, 0xab, 0xf2, 0x17, 0xc2, 0x4f, 0x09, 0xb7, 0xc3, 0xba, 0x34,
	0x95, 0x32, 0x3b, 0x13, 0x52, 0xee, 0x6c, 0xa5, 0xbf, 0xc5, 0x90, 0xd6, 0x49, 0x5d, 0x19, 0x89,
	0xfc, 0x8a, 0xe2, 0xd7, 0x9e, 0xec, 0x2a, 0x65, 0x36, 0x35, 0x96, 0x68, 0x7b, 0x53, 0xd9, 0x82,
	0xfc, 0x5d, 0x26, 0x7f, 0x83, 0x34, 0x24, 0xe5, 0xf3, 0x2f, 0x84, 0xbc, 0x1a, 0x3f, 0x23, 0xfc,
	0x24, 0x77, 0x37, 0xac, 0xc4, 0xae, 0x52, 0x26, 0xa7, 0x46, 0xc8, 0xcc, 0x4c, 0xca, 0x37, 0x15,
	0x47, 0x60, 0xbd, 0x91, 0x78, 0x68, 0x9b, 0xaa, 0xb7, 0x4d, 0x7a, 0xcc, 0x50, 0xec, 0x8d, 0xec,
	0x00, 0xa1, 0xdc, 0x1b, 0xe2, 0x8b, 0xb6, 0xe8, 0x0d, 0xe1, 0x56, 0xbd, 0x37, 0x66, 0x42, 0xca,
	0x9d, 0x89, 0x94, 0x7b, 0x43, 0x20, 0x91, 0xdf, 0xd1, 0xe8, 0x79, 0x26, 0x6a, 0x07, 0x3c, 0x3d,
	0x4a, 0x68, 0xfb, 0xd3, 0x19, 0x03, 0xc1, 0x1e, 0x23, 0xd8, 0x24, 0xeb, 0x92, 0x04, 0xf0, 0x3b,
	0x06, 0xaf, 0xc8, 0x6f, 0x08, 0x63, 0x70, 0x38, 0x2c, 0x87, 0xda, 0x21, 0x9f, 0x1e, 0x23, 0x3b,
	0xeb, 0xe8, 0x5b, 0x0c, 0x63, 0x8d, 0x18, 0x6a, 0x18, 0x07, 0xed, 0xab, 0x9b, 0x2a, 0xba, 0xbe,
	0xa9, 0xa2, 0xff, 0x6f, 0xaa, 0xe8, 0xdb, 0xdb, 0x6a, 0xe9, 0xfa, 0xb6, 0x5a, 0xfa, 0xf7, 0xb6,
	0x5a, 0xfa, 0xb8, 0x96, 0xe7, 0xe8, 0x8b, 0x1c, 0x57, 0xd1, 0x65, 0xdf, 0x09, 0x4f, 0xe7, 0xd9,
	0x0f, 0x3b, 0xeb, 0x0f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xbc, 0xf8, 0x57, 0xe6, 0xc7, 0x13, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Commerce items.
	Commerce(ctx context.Context, in *QueryGetCommerceRequest, opts ...grpc.CallOption) (*QueryGetCommerceResponse, error)
	CommerceAll(ctx context.Context, in *QueryAllCommerceRequest, opts ...grpc.CallOption) (*QueryAllCommerceResponse, error)
	// Queries a list of Governance items.
	Governance(ctx context.Context, in *QueryGetGovernanceRequest, opts ...grpc.CallOption) (*QueryGetGovernanceResponse, error)
	GovernanceAll(ctx context.Context, in *QueryAllGovernanceRequest, opts ...grpc.CallOption) (*QueryAllGovernanceResponse, error)
	// Queries a list of Domain items.
	Domain(ctx context.Context, in *QueryGetDomainRequest, opts ...grpc.CallOption) (*QueryGetDomainResponse, error)
	DomainAll(ctx context.Context, in *QueryAllDomainRequest, opts ...grpc.CallOption) (*QueryAllDomainResponse, error)
	// Queries a list of Compliance items.
	Compliance(ctx context.Context, in *QueryGetComplianceRequest, opts ...grpc.CallOption) (*QueryGetComplianceResponse, error)
	ComplianceAll(ctx context.Context, in *QueryAllComplianceRequest, opts ...grpc.CallOption) (*QueryAllComplianceResponse, error)
	// Queries a list of Factory items.
	Factory(ctx context.Context, in *QueryGetFactoryRequest, opts ...grpc.CallOption) (*QueryGetFactoryResponse, error)
	FactoryAll(ctx context.Context, in *QueryAllFactoryRequest, opts ...grpc.CallOption) (*QueryAllFactoryResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/hdoacommandcenter.hdoacommandcenter.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Commerce(ctx context.Context, in *QueryGetCommerceRequest, opts ...grpc.CallOption) (*QueryGetCommerceResponse, error) {
	out := new(QueryGetCommerceResponse)
	err := c.cc.Invoke(ctx, "/hdoacommandcenter.hdoacommandcenter.Query/Commerce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CommerceAll(ctx context.Context, in *QueryAllCommerceRequest, opts ...grpc.CallOption) (*QueryAllCommerceResponse, error) {
	out := new(QueryAllCommerceResponse)
	err := c.cc.Invoke(ctx, "/hdoacommandcenter.hdoacommandcenter.Query/CommerceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Governance(ctx context.Context, in *QueryGetGovernanceRequest, opts ...grpc.CallOption) (*QueryGetGovernanceResponse, error) {
	out := new(QueryGetGovernanceResponse)
	err := c.cc.Invoke(ctx, "/hdoacommandcenter.hdoacommandcenter.Query/Governance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GovernanceAll(ctx context.Context, in *QueryAllGovernanceRequest, opts ...grpc.CallOption) (*QueryAllGovernanceResponse, error) {
	out := new(QueryAllGovernanceResponse)
	err := c.cc.Invoke(ctx, "/hdoacommandcenter.hdoacommandcenter.Query/GovernanceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Domain(ctx context.Context, in *QueryGetDomainRequest, opts ...grpc.CallOption) (*QueryGetDomainResponse, error) {
	out := new(QueryGetDomainResponse)
	err := c.cc.Invoke(ctx, "/hdoacommandcenter.hdoacommandcenter.Query/Domain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DomainAll(ctx context.Context, in *QueryAllDomainRequest, opts ...grpc.CallOption) (*QueryAllDomainResponse, error) {
	out := new(QueryAllDomainResponse)
	err := c.cc.Invoke(ctx, "/hdoacommandcenter.hdoacommandcenter.Query/DomainAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Compliance(ctx context.Context, in *QueryGetComplianceRequest, opts ...grpc.CallOption) (*QueryGetComplianceResponse, error) {
	out := new(QueryGetComplianceResponse)
	err := c.cc.Invoke(ctx, "/hdoacommandcenter.hdoacommandcenter.Query/Compliance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ComplianceAll(ctx context.Context, in *QueryAllComplianceRequest, opts ...grpc.CallOption) (*QueryAllComplianceResponse, error) {
	out := new(QueryAllComplianceResponse)
	err := c.cc.Invoke(ctx, "/hdoacommandcenter.hdoacommandcenter.Query/ComplianceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Factory(ctx context.Context, in *QueryGetFactoryRequest, opts ...grpc.CallOption) (*QueryGetFactoryResponse, error) {
	out := new(QueryGetFactoryResponse)
	err := c.cc.Invoke(ctx, "/hdoacommandcenter.hdoacommandcenter.Query/Factory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FactoryAll(ctx context.Context, in *QueryAllFactoryRequest, opts ...grpc.CallOption) (*QueryAllFactoryResponse, error) {
	out := new(QueryAllFactoryResponse)
	err := c.cc.Invoke(ctx, "/hdoacommandcenter.hdoacommandcenter.Query/FactoryAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Commerce items.
	Commerce(context.Context, *QueryGetCommerceRequest) (*QueryGetCommerceResponse, error)
	CommerceAll(context.Context, *QueryAllCommerceRequest) (*QueryAllCommerceResponse, error)
	// Queries a list of Governance items.
	Governance(context.Context, *QueryGetGovernanceRequest) (*QueryGetGovernanceResponse, error)
	GovernanceAll(context.Context, *QueryAllGovernanceRequest) (*QueryAllGovernanceResponse, error)
	// Queries a list of Domain items.
	Domain(context.Context, *QueryGetDomainRequest) (*QueryGetDomainResponse, error)
	DomainAll(context.Context, *QueryAllDomainRequest) (*QueryAllDomainResponse, error)
	// Queries a list of Compliance items.
	Compliance(context.Context, *QueryGetComplianceRequest) (*QueryGetComplianceResponse, error)
	ComplianceAll(context.Context, *QueryAllComplianceRequest) (*QueryAllComplianceResponse, error)
	// Queries a list of Factory items.
	Factory(context.Context, *QueryGetFactoryRequest) (*QueryGetFactoryResponse, error)
	FactoryAll(context.Context, *QueryAllFactoryRequest) (*QueryAllFactoryResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Commerce(ctx context.Context, req *QueryGetCommerceRequest) (*QueryGetCommerceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commerce not implemented")
}
func (*UnimplementedQueryServer) CommerceAll(ctx context.Context, req *QueryAllCommerceRequest) (*QueryAllCommerceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommerceAll not implemented")
}
func (*UnimplementedQueryServer) Governance(ctx context.Context, req *QueryGetGovernanceRequest) (*QueryGetGovernanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Governance not implemented")
}
func (*UnimplementedQueryServer) GovernanceAll(ctx context.Context, req *QueryAllGovernanceRequest) (*QueryAllGovernanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GovernanceAll not implemented")
}
func (*UnimplementedQueryServer) Domain(ctx context.Context, req *QueryGetDomainRequest) (*QueryGetDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Domain not implemented")
}
func (*UnimplementedQueryServer) DomainAll(ctx context.Context, req *QueryAllDomainRequest) (*QueryAllDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainAll not implemented")
}
func (*UnimplementedQueryServer) Compliance(ctx context.Context, req *QueryGetComplianceRequest) (*QueryGetComplianceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compliance not implemented")
}
func (*UnimplementedQueryServer) ComplianceAll(ctx context.Context, req *QueryAllComplianceRequest) (*QueryAllComplianceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComplianceAll not implemented")
}
func (*UnimplementedQueryServer) Factory(ctx context.Context, req *QueryGetFactoryRequest) (*QueryGetFactoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Factory not implemented")
}
func (*UnimplementedQueryServer) FactoryAll(ctx context.Context, req *QueryAllFactoryRequest) (*QueryAllFactoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FactoryAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hdoacommandcenter.hdoacommandcenter.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Commerce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCommerceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Commerce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hdoacommandcenter.hdoacommandcenter.Query/Commerce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Commerce(ctx, req.(*QueryGetCommerceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CommerceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCommerceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CommerceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hdoacommandcenter.hdoacommandcenter.Query/CommerceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CommerceAll(ctx, req.(*QueryAllCommerceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Governance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGovernanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Governance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hdoacommandcenter.hdoacommandcenter.Query/Governance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Governance(ctx, req.(*QueryGetGovernanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GovernanceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGovernanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GovernanceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hdoacommandcenter.hdoacommandcenter.Query/GovernanceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GovernanceAll(ctx, req.(*QueryAllGovernanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Domain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Domain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hdoacommandcenter.hdoacommandcenter.Query/Domain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Domain(ctx, req.(*QueryGetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DomainAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DomainAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hdoacommandcenter.hdoacommandcenter.Query/DomainAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DomainAll(ctx, req.(*QueryAllDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Compliance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetComplianceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Compliance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hdoacommandcenter.hdoacommandcenter.Query/Compliance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Compliance(ctx, req.(*QueryGetComplianceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ComplianceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllComplianceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ComplianceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hdoacommandcenter.hdoacommandcenter.Query/ComplianceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ComplianceAll(ctx, req.(*QueryAllComplianceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Factory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFactoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Factory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hdoacommandcenter.hdoacommandcenter.Query/Factory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Factory(ctx, req.(*QueryGetFactoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FactoryAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFactoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FactoryAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hdoacommandcenter.hdoacommandcenter.Query/FactoryAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FactoryAll(ctx, req.(*QueryAllFactoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hdoacommandcenter.hdoacommandcenter.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Commerce",
			Handler:    _Query_Commerce_Handler,
		},
		{
			MethodName: "CommerceAll",
			Handler:    _Query_CommerceAll_Handler,
		},
		{
			MethodName: "Governance",
			Handler:    _Query_Governance_Handler,
		},
		{
			MethodName: "GovernanceAll",
			Handler:    _Query_GovernanceAll_Handler,
		},
		{
			MethodName: "Domain",
			Handler:    _Query_Domain_Handler,
		},
		{
			MethodName: "DomainAll",
			Handler:    _Query_DomainAll_Handler,
		},
		{
			MethodName: "Compliance",
			Handler:    _Query_Compliance_Handler,
		},
		{
			MethodName: "ComplianceAll",
			Handler:    _Query_ComplianceAll_Handler,
		},
		{
			MethodName: "Factory",
			Handler:    _Query_Factory_Handler,
		},
		{
			MethodName: "FactoryAll",
			Handler:    _Query_FactoryAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hdoacommandcenter/hdoacommandcenter/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetCommerceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCommerceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCommerceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCommerceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCommerceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCommerceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Commerce.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCommerceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCommerceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCommerceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCommerceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCommerceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCommerceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Commerce) > 0 {
		for iNdEx := len(m.Commerce) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Commerce[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGovernanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGovernanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGovernanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGovernanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGovernanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGovernanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Governance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllGovernanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGovernanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGovernanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGovernanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGovernanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGovernanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Governance) > 0 {
		for iNdEx := len(m.Governance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Governance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDomainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDomainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDomainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDomainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Domain.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDomainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDomainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDomainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDomainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		for iNdEx := len(m.Domain) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Domain[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetComplianceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetComplianceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetComplianceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetComplianceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetComplianceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetComplianceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Compliance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllComplianceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllComplianceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllComplianceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllComplianceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllComplianceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllComplianceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Compliance) > 0 {
		for iNdEx := len(m.Compliance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Compliance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFactoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFactoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFactoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFactoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFactoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFactoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Factory.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllFactoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFactoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFactoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFactoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFactoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFactoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Factory) > 0 {
		for iNdEx := len(m.Factory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Factory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetCommerceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetCommerceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Commerce.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCommerceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCommerceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Commerce) > 0 {
		for _, e := range m.Commerce {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGovernanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetGovernanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Governance.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllGovernanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGovernanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Governance) > 0 {
		for _, e := range m.Governance {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDomainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetDomainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Domain.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDomainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDomainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domain) > 0 {
		for _, e := range m.Domain {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetComplianceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetComplianceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Compliance.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllComplianceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllComplianceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Compliance) > 0 {
		for _, e := range m.Compliance {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetFactoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetFactoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Factory.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllFactoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFactoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Factory) > 0 {
		for _, e := range m.Factory {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCommerceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCommerceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCommerceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCommerceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCommerceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCommerceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commerce", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commerce.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCommerceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCommerceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCommerceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCommerceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCommerceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCommerceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commerce", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commerce = append(m.Commerce, Commerce{})
			if err := m.Commerce[len(m.Commerce)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGovernanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGovernanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGovernanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGovernanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGovernanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGovernanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Governance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Governance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGovernanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGovernanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGovernanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGovernanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGovernanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGovernanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Governance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Governance = append(m.Governance, Governance{})
			if err := m.Governance[len(m.Governance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDomainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Domain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDomainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = append(m.Domain, Domain{})
			if err := m.Domain[len(m.Domain)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetComplianceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetComplianceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetComplianceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetComplianceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetComplianceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetComplianceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compliance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Compliance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllComplianceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllComplianceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllComplianceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllComplianceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllComplianceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllComplianceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compliance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Compliance = append(m.Compliance, Compliance{})
			if err := m.Compliance[len(m.Compliance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFactoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFactoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFactoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFactoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFactoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFactoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Factory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Factory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFactoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFactoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFactoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFactoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFactoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFactoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Factory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Factory = append(m.Factory, Factory{})
			if err := m.Factory[len(m.Factory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
