// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hdoacommandcenter/hdoacommandcenter/domain.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Domain struct {
	Id              uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DocPathway      bool   `protobuf:"varint,2,opt,name=docPathway,proto3" json:"docPathway,omitempty"`
	NursePathway    bool   `protobuf:"varint,3,opt,name=nursePathway,proto3" json:"nursePathway,omitempty"`
	AdminPathway    bool   `protobuf:"varint,4,opt,name=adminPathway,proto3" json:"adminPathway,omitempty"`
	PharmaPathway   bool   `protobuf:"varint,5,opt,name=pharmaPathway,proto3" json:"pharmaPathway,omitempty"`
	PathModelling   bool   `protobuf:"varint,6,opt,name=pathModelling,proto3" json:"pathModelling,omitempty"`
	ResourceTracing bool   `protobuf:"varint,7,opt,name=resourceTracing,proto3" json:"resourceTracing,omitempty"`
	Creator         string `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Domain) Reset()         { *m = Domain{} }
func (m *Domain) String() string { return proto.CompactTextString(m) }
func (*Domain) ProtoMessage()    {}
func (*Domain) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd45d5266fa147f7, []int{0}
}
func (m *Domain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Domain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Domain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Domain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Domain.Merge(m, src)
}
func (m *Domain) XXX_Size() int {
	return m.Size()
}
func (m *Domain) XXX_DiscardUnknown() {
	xxx_messageInfo_Domain.DiscardUnknown(m)
}

var xxx_messageInfo_Domain proto.InternalMessageInfo

func (m *Domain) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Domain) GetDocPathway() bool {
	if m != nil {
		return m.DocPathway
	}
	return false
}

func (m *Domain) GetNursePathway() bool {
	if m != nil {
		return m.NursePathway
	}
	return false
}

func (m *Domain) GetAdminPathway() bool {
	if m != nil {
		return m.AdminPathway
	}
	return false
}

func (m *Domain) GetPharmaPathway() bool {
	if m != nil {
		return m.PharmaPathway
	}
	return false
}

func (m *Domain) GetPathModelling() bool {
	if m != nil {
		return m.PathModelling
	}
	return false
}

func (m *Domain) GetResourceTracing() bool {
	if m != nil {
		return m.ResourceTracing
	}
	return false
}

func (m *Domain) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Domain)(nil), "hdoacommandcenter.hdoacommandcenter.Domain")
}

func init() {
	proto.RegisterFile("hdoacommandcenter/hdoacommandcenter/domain.proto", fileDescriptor_bd45d5266fa147f7)
}

var fileDescriptor_bd45d5266fa147f7 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0xd1, 0x3f, 0x4b, 0xc4, 0x30,
	0x18, 0xc7, 0xf1, 0xa6, 0x9e, 0xbd, 0x33, 0xf8, 0x07, 0x32, 0x65, 0x0a, 0xe5, 0x74, 0xe8, 0xd2,
	0x53, 0xf0, 0x1d, 0x88, 0xe0, 0x24, 0x48, 0x71, 0x72, 0x7b, 0x4c, 0x82, 0x0d, 0x5c, 0x92, 0x92,
	0xe6, 0xd0, 0x7b, 0x17, 0xf7, 0xb2, 0x1c, 0x6f, 0x74, 0x94, 0xf6, 0x8d, 0x48, 0x63, 0x0b, 0x3d,
	0xeb, 0xd8, 0x6f, 0x3f, 0x59, 0x7e, 0x0f, 0xbe, 0x29, 0x85, 0x05, 0x6e, 0xb5, 0x06, 0x23, 0xb8,
	0x34, 0x5e, 0xba, 0xeb, 0x69, 0x11, 0x56, 0x83, 0x32, 0xab, 0xca, 0x59, 0x6f, 0xc9, 0xe5, 0xe4,
	0xff, 0x6a, 0x52, 0x96, 0xbb, 0x18, 0x27, 0xf7, 0xe1, 0x15, 0x39, 0xc7, 0xb1, 0x12, 0x14, 0xa5,
	0x28, 0x9b, 0x15, 0xb1, 0x12, 0x84, 0x61, 0x2c, 0x2c, 0x7f, 0x02, 0x5f, 0xbe, 0xc3, 0x96, 0xc6,
	0x29, 0xca, 0x16, 0xc5, 0xa8, 0x90, 0x25, 0x3e, 0x35, 0x1b, 0x57, 0xcb, 0x41, 0x1c, 0x05, 0x71,
	0xd0, 0x3a, 0x03, 0x42, 0x2b, 0x33, 0x98, 0xd9, 0xaf, 0x19, 0x37, 0x72, 0x85, 0xcf, 0xaa, 0x12,
	0x9c, 0x86, 0x01, 0x1d, 0x07, 0x74, 0x18, 0x83, 0x02, 0x5f, 0x3e, 0x5a, 0x21, 0xd7, 0x6b, 0x65,
	0xde, 0x68, 0xd2, 0xab, 0x71, 0x24, 0x19, 0xbe, 0x70, 0xb2, 0xb6, 0x1b, 0xc7, 0xe5, 0xb3, 0x03,
	0xde, 0xb9, 0x79, 0x70, 0x7f, 0x33, 0xa1, 0x78, 0xce, 0x9d, 0x04, 0x6f, 0x1d, 0x5d, 0xa4, 0x28,
	0x3b, 0x29, 0x86, 0xcf, 0xbb, 0x87, 0xcf, 0x86, 0xa1, 0x7d, 0xc3, 0xd0, 0x77, 0xc3, 0xd0, 0xae,
	0x65, 0xd1, 0xbe, 0x65, 0xd1, 0x57, 0xcb, 0xa2, 0x97, 0xbc, 0xdb, 0x2f, 0xef, 0x07, 0xcc, 0xfb,
	0xcd, 0x3f, 0xfe, 0xb9, 0x83, 0xdf, 0x56, 0xb2, 0x7e, 0x4d, 0xc2, 0x1d, 0x6e, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xbf, 0x24, 0x13, 0xd4, 0xbb, 0x01, 0x00, 0x00,
}

func (m *Domain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Domain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Domain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x42
	}
	if m.ResourceTracing {
		i--
		if m.ResourceTracing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.PathModelling {
		i--
		if m.PathModelling {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.PharmaPathway {
		i--
		if m.PharmaPathway {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.AdminPathway {
		i--
		if m.AdminPathway {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.NursePathway {
		i--
		if m.NursePathway {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.DocPathway {
		i--
		if m.DocPathway {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintDomain(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDomain(dAtA []byte, offset int, v uint64) int {
	offset -= sovDomain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Domain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDomain(uint64(m.Id))
	}
	if m.DocPathway {
		n += 2
	}
	if m.NursePathway {
		n += 2
	}
	if m.AdminPathway {
		n += 2
	}
	if m.PharmaPathway {
		n += 2
	}
	if m.PathModelling {
		n += 2
	}
	if m.ResourceTracing {
		n += 2
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	return n
}

func sovDomain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDomain(x uint64) (n int) {
	return sovDomain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Domain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Domain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Domain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocPathway", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DocPathway = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NursePathway", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NursePathway = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminPathway", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdminPathway = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PharmaPathway", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PharmaPathway = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathModelling", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PathModelling = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceTracing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResourceTracing = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDomain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDomain
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDomain
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDomain
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDomain        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDomain          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDomain = fmt.Errorf("proto: unexpected end of group")
)
