// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgUpdateCompliance } from "./types/hdoacommandcenter/hdoacommandcenter/tx";
import { MsgCreateGovernance } from "./types/hdoacommandcenter/hdoacommandcenter/tx";
import { MsgCreateCompliance } from "./types/hdoacommandcenter/hdoacommandcenter/tx";
import { MsgDeleteCommerce } from "./types/hdoacommandcenter/hdoacommandcenter/tx";
import { MsgCreateDomain } from "./types/hdoacommandcenter/hdoacommandcenter/tx";
import { MsgDeleteDomain } from "./types/hdoacommandcenter/hdoacommandcenter/tx";
import { MsgUpdateGovernance } from "./types/hdoacommandcenter/hdoacommandcenter/tx";
import { MsgDeleteGovernance } from "./types/hdoacommandcenter/hdoacommandcenter/tx";
import { MsgCreateCommerce } from "./types/hdoacommandcenter/hdoacommandcenter/tx";
import { MsgUpdateDomain } from "./types/hdoacommandcenter/hdoacommandcenter/tx";
import { MsgUpdateCommerce } from "./types/hdoacommandcenter/hdoacommandcenter/tx";
import { MsgDeleteCompliance } from "./types/hdoacommandcenter/hdoacommandcenter/tx";

import { Commerce as typeCommerce} from "./types"
import { Compliance as typeCompliance} from "./types"
import { Domain as typeDomain} from "./types"
import { Governance as typeGovernance} from "./types"
import { Params as typeParams} from "./types"

export { MsgUpdateCompliance, MsgCreateGovernance, MsgCreateCompliance, MsgDeleteCommerce, MsgCreateDomain, MsgDeleteDomain, MsgUpdateGovernance, MsgDeleteGovernance, MsgCreateCommerce, MsgUpdateDomain, MsgUpdateCommerce, MsgDeleteCompliance };

type sendMsgUpdateComplianceParams = {
  value: MsgUpdateCompliance,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateGovernanceParams = {
  value: MsgCreateGovernance,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateComplianceParams = {
  value: MsgCreateCompliance,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteCommerceParams = {
  value: MsgDeleteCommerce,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateDomainParams = {
  value: MsgCreateDomain,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteDomainParams = {
  value: MsgDeleteDomain,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateGovernanceParams = {
  value: MsgUpdateGovernance,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteGovernanceParams = {
  value: MsgDeleteGovernance,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateCommerceParams = {
  value: MsgCreateCommerce,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateDomainParams = {
  value: MsgUpdateDomain,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateCommerceParams = {
  value: MsgUpdateCommerce,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteComplianceParams = {
  value: MsgDeleteCompliance,
  fee?: StdFee,
  memo?: string
};


type msgUpdateComplianceParams = {
  value: MsgUpdateCompliance,
};

type msgCreateGovernanceParams = {
  value: MsgCreateGovernance,
};

type msgCreateComplianceParams = {
  value: MsgCreateCompliance,
};

type msgDeleteCommerceParams = {
  value: MsgDeleteCommerce,
};

type msgCreateDomainParams = {
  value: MsgCreateDomain,
};

type msgDeleteDomainParams = {
  value: MsgDeleteDomain,
};

type msgUpdateGovernanceParams = {
  value: MsgUpdateGovernance,
};

type msgDeleteGovernanceParams = {
  value: MsgDeleteGovernance,
};

type msgCreateCommerceParams = {
  value: MsgCreateCommerce,
};

type msgUpdateDomainParams = {
  value: MsgUpdateDomain,
};

type msgUpdateCommerceParams = {
  value: MsgUpdateCommerce,
};

type msgDeleteComplianceParams = {
  value: MsgDeleteCompliance,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgUpdateCompliance({ value, fee, memo }: sendMsgUpdateComplianceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateCompliance: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdateCompliance({ value: MsgUpdateCompliance.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateCompliance: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateGovernance({ value, fee, memo }: sendMsgCreateGovernanceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateGovernance: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateGovernance({ value: MsgCreateGovernance.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateGovernance: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateCompliance({ value, fee, memo }: sendMsgCreateComplianceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateCompliance: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateCompliance({ value: MsgCreateCompliance.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateCompliance: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteCommerce({ value, fee, memo }: sendMsgDeleteCommerceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteCommerce: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgDeleteCommerce({ value: MsgDeleteCommerce.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteCommerce: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateDomain({ value, fee, memo }: sendMsgCreateDomainParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateDomain: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateDomain({ value: MsgCreateDomain.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateDomain: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteDomain({ value, fee, memo }: sendMsgDeleteDomainParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteDomain: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgDeleteDomain({ value: MsgDeleteDomain.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteDomain: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateGovernance({ value, fee, memo }: sendMsgUpdateGovernanceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateGovernance: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdateGovernance({ value: MsgUpdateGovernance.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateGovernance: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteGovernance({ value, fee, memo }: sendMsgDeleteGovernanceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteGovernance: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgDeleteGovernance({ value: MsgDeleteGovernance.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteGovernance: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateCommerce({ value, fee, memo }: sendMsgCreateCommerceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateCommerce: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateCommerce({ value: MsgCreateCommerce.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateCommerce: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateDomain({ value, fee, memo }: sendMsgUpdateDomainParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateDomain: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdateDomain({ value: MsgUpdateDomain.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateDomain: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateCommerce({ value, fee, memo }: sendMsgUpdateCommerceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateCommerce: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdateCommerce({ value: MsgUpdateCommerce.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateCommerce: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteCompliance({ value, fee, memo }: sendMsgDeleteComplianceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteCompliance: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgDeleteCompliance({ value: MsgDeleteCompliance.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteCompliance: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgUpdateCompliance({ value }: msgUpdateComplianceParams): EncodeObject {
			try {
				return { typeUrl: "/hdoacommandcenter.hdoacommandcenter.MsgUpdateCompliance", value: MsgUpdateCompliance.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateCompliance: Could not create message: ' + e.message)
			}
		},
		
		msgCreateGovernance({ value }: msgCreateGovernanceParams): EncodeObject {
			try {
				return { typeUrl: "/hdoacommandcenter.hdoacommandcenter.MsgCreateGovernance", value: MsgCreateGovernance.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateGovernance: Could not create message: ' + e.message)
			}
		},
		
		msgCreateCompliance({ value }: msgCreateComplianceParams): EncodeObject {
			try {
				return { typeUrl: "/hdoacommandcenter.hdoacommandcenter.MsgCreateCompliance", value: MsgCreateCompliance.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateCompliance: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteCommerce({ value }: msgDeleteCommerceParams): EncodeObject {
			try {
				return { typeUrl: "/hdoacommandcenter.hdoacommandcenter.MsgDeleteCommerce", value: MsgDeleteCommerce.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteCommerce: Could not create message: ' + e.message)
			}
		},
		
		msgCreateDomain({ value }: msgCreateDomainParams): EncodeObject {
			try {
				return { typeUrl: "/hdoacommandcenter.hdoacommandcenter.MsgCreateDomain", value: MsgCreateDomain.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateDomain: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteDomain({ value }: msgDeleteDomainParams): EncodeObject {
			try {
				return { typeUrl: "/hdoacommandcenter.hdoacommandcenter.MsgDeleteDomain", value: MsgDeleteDomain.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteDomain: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateGovernance({ value }: msgUpdateGovernanceParams): EncodeObject {
			try {
				return { typeUrl: "/hdoacommandcenter.hdoacommandcenter.MsgUpdateGovernance", value: MsgUpdateGovernance.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateGovernance: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteGovernance({ value }: msgDeleteGovernanceParams): EncodeObject {
			try {
				return { typeUrl: "/hdoacommandcenter.hdoacommandcenter.MsgDeleteGovernance", value: MsgDeleteGovernance.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteGovernance: Could not create message: ' + e.message)
			}
		},
		
		msgCreateCommerce({ value }: msgCreateCommerceParams): EncodeObject {
			try {
				return { typeUrl: "/hdoacommandcenter.hdoacommandcenter.MsgCreateCommerce", value: MsgCreateCommerce.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateCommerce: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateDomain({ value }: msgUpdateDomainParams): EncodeObject {
			try {
				return { typeUrl: "/hdoacommandcenter.hdoacommandcenter.MsgUpdateDomain", value: MsgUpdateDomain.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateDomain: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateCommerce({ value }: msgUpdateCommerceParams): EncodeObject {
			try {
				return { typeUrl: "/hdoacommandcenter.hdoacommandcenter.MsgUpdateCommerce", value: MsgUpdateCommerce.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateCommerce: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteCompliance({ value }: msgDeleteComplianceParams): EncodeObject {
			try {
				return { typeUrl: "/hdoacommandcenter.hdoacommandcenter.MsgDeleteCompliance", value: MsgDeleteCompliance.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteCompliance: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						Commerce: getStructure(typeCommerce.fromPartial({})),
						Compliance: getStructure(typeCompliance.fromPartial({})),
						Domain: getStructure(typeDomain.fromPartial({})),
						Governance: getStructure(typeGovernance.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			HdoacommandcenterHdoacommandcenter: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;